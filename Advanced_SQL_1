# Продвинутый SQL. 1 часть

1. Найдите количество вопросов, которые набрали больше 300 очков или как минимум 100 раз были добавлены в «Закладки».
```
SELECT COUNT(p.id)
FROM stackoverflow.posts p
JOIN stackoverflow.post_types AS pt ON p.post_type_id = pt.id
WHERE pt.type = 'Question' AND score > 300 OR favorites_count >= 100
```
2. Сколько в среднем в день задавали вопросов с 1 по 18 ноября 2008 включительно? Результат округлите до целого числа.
```
SELECT
    ROUND(AVG(count_id))
FROM (SELECT
    CAST(DATE_TRUNC('day',creation_date) AS date),
    COUNT(p.id) AS count_id
FROM stackoverflow.posts p
JOIN stackoverflow.post_types pt ON p.post_type_id = pt.id
WHERE pt.type = 'Question' AND DATE_TRUNC('day',creation_date) BETWEEN '01-11-2008' AND '18-11-2008'
GROUP BY DATE_TRUNC('day',creation_date)) AS count_per_day
```
3. Сколько пользователей получили значки сразу в день регистрации? Выведите количество уникальных пользователей.
```
SELECT
    COUNT(DISTINCT u.id)
FROM stackoverflow.users u
JOIN stackoverflow.badges b ON u.id = b.user_id
WHERE CAST(u.creation_date AS date) = CAST(b.creation_date AS date)
```
4. Сколько уникальных постов пользователя с именем Joel Coehoorn получили хотя бы один голос?
```
SELECT COUNT(DISTINCT p.id)
FROM stackoverflow.users u
JOIN stackoverflow.posts p ON u.id = p.user_id
JOIN stackoverflow.votes v ON p.id = v.post_id
WHERE display_name LIKE '%Joel Coehoorn%'
```
5. Выгрузите все поля таблицы vote_types. Добавьте к таблице поле rank, в которое войдут номера записей в обратном порядке. Таблица должна быть отсортирована по полю id.
```
SELECT *,
    RANK() OVER(ORDER BY id DESC)
FROM stackoverflow.vote_types
ORDER BY id
```
6. Отберите 10 пользователей, которые поставили больше всего голосов типа Close.
Отобразите таблицу из двух полей: идентификатором пользователя и количеством голосов.
Отсортируйте данные сначала по убыванию количества голосов, потом по убыванию значения идентификатора пользователя.
```
SELECT user_id,
    COUNT(user_id) as quantity
FROM stackoverflow.votes v
JOIN stackoverflow.vote_types vt ON v.vote_type_id = vt.id
WHERE name = 'Close'
GROUP BY user_id
ORDER BY quantity DESC
LIMIT 10
```
7. Отберите 10 пользователей по количеству значков, полученных в период с 15 ноября по 15 декабря 2008 года включительно.
Отобразите несколько полей:
идентификатор пользователя;
число значков;
место в рейтинге — чем больше значков, тем выше рейтинг.
Пользователям, которые набрали одинаковое количество значков, присвойте одно и то же место в рейтинге.
Отсортируйте записи по количеству значков по убыванию, а затем по возрастанию значения идентификатора пользователя.
```
WITH query AS(SELECT u.id AS top_users,
    COUNT(b.id) quantity
FROM stackoverflow.users u
JOIN stackoverflow.badges b ON u.id = b.user_id
WHERE b.creation_date BETWEEN '15-11-2008' AND '16-12-2008'
GROUP BY u.id
ORDER BY quantity DESC
LIMIT 10)

SELECT
    top_users,
    quantity,
    DENSE_RANK() OVER(ORDER BY quantity DESC)
FROM query
ORDER BY quantity DESC
```
8. Сколько в среднем очков получает пост каждого пользователя?
Сформируйте таблицу из следующих полей:
заголовок поста;
идентификатор пользователя;
число очков поста;
среднее число очков пользователя за пост, округлённое до целого числа.
Не учитывайте посты без заголовка, а также те, что набрали ноль очков.
```
WITH sc AS (
SELECT ROUND(AVG(score)) AS avg_score,
       user_id
FROM stackoverflow.posts
WHERE title IS NOT NULL AND score <> 0
GROUP BY user_id)

SELECT p.title,
       sc.user_id,
       p.score,
       sc.avg_score
FROM sc
JOIN stackoverflow.posts AS p ON sc.user_id=p.user_id
WHERE p.title IS NOT NULL AND p.score <> 0;
```
9. Отобразите заголовки постов, которые были написаны пользователями, получившими более 1000 значков. Посты без заголовков не должны попасть в список.
```
SELECT title
FROM stackoverflow.posts
WHERE user_id IN (SELECT user_id
                  FROM stackoverflow.badges
                  GROUP BY user_id
                  HAVING COUNT(id) >1000)
              AND title IS NOT NULL;
```
10. Напишите запрос, который выгрузит данные о пользователях из Канады (англ. Canada). Разделите пользователей на три группы в зависимости от количества просмотров их профилей:
пользователям с числом просмотров больше либо равным 350 присвойте группу 1;
пользователям с числом просмотров меньше 350, но больше либо равно 100 — группу 2;
пользователям с числом просмотров меньше 100 — группу 3.
Отобразите в итоговой таблице идентификатор пользователя, количество просмотров профиля и группу. Пользователи с количеством просмотров меньше либо равным нулю не должны войти в итоговую таблицу.
```
SELECT
    id,
    views,
    CASE
        WHEN views >= 350 THEN 1
        WHEN views < 350 AND views >= 100 THEN 2
        WHEN views < 100 THEN 3
    END
FROM stackoverflow.users
WHERE location LIKE '%Canada%' AND views > 0
```
11. Дополните предыдущий запрос. Отобразите лидеров каждой группы — пользователей, которые набрали максимальное число просмотров в своей группе. 
Выведите поля с идентификатором пользователя, группой и количеством просмотров. Отсортируйте таблицу по убыванию просмотров, а затем по возрастанию значения идентификатора.
```
WITH grp AS (SELECT g.id,
                    g.views,
                    g.group,
                    MAX(g.views) OVER (PARTITION BY g.group) AS max     
             FROM (SELECT id,
                          views,
                          CASE
                             WHEN views >= 350 THEN 1
                             WHEN views < 100 THEN 3
                             ELSE 2
                          END AS group
                   FROM stackoverflow.users
                   WHERE location LIKE '%Canada%' AND views > 0) as g
              )
  
SELECT grp.id, 
       grp.views,  
       grp.group
FROM grp
WHERE grp.views = grp.max
ORDER BY grp.views DESC, grp.id;
```
12. Посчитайте ежедневный прирост новых пользователей в ноябре 2008 года. Сформируйте таблицу с полями:
* номер дня;
* число пользователей, зарегистрированных в этот день;
* сумму пользователей с накоплением.
```
WITH reg_users AS (SELECT
    EXTRACT(DAY FROM creation_date) AS reg_day,
    COUNT(u.id) AS cnt_reg
FROM stackoverflow.users u
WHERE CAST(DATE_TRUNC('day', creation_date) AS date) BETWEEN '01-11-2008' AND '30-11-2008'
GROUP BY reg_day)

SELECT
    reg_day,
    cnt_reg,
    SUM(cnt_reg) OVER(ORDER BY reg_day)
FROM reg_users
```
13. Для каждого пользователя, который написал хотя бы один пост, найдите интервал между регистрацией и временем создания первого поста. Отобразите:
* идентификатор пользователя;
* разницу во времени между регистрацией и первым постом.
```
WITH dt AS (
    SELECT
        DISTINCT user_id,
        MIN(creation_date) OVER(PARTITION BY user_id) AS first_post
    FROM stackoverflow.posts p
)
SELECT
    user_id,
    (first_post - u.creation_date) AS diff
FROM dt
JOIN stackoverflow.users u ON u.id = dt.user_id
```
